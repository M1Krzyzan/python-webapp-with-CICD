name: CI Pipeline

on: push

jobs:
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup Poetry
        run: pip install --no-cache-dir "poetry==1.8.4"

      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/pyproject.toml', 'backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install --no-root --no-interaction --no-ansi

      - name: Run backend tests
        env:
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
          MONGO_USER: ${{ secrets.MONGO_USER }}
          MONGO_DATABASE: ${{ secrets.MONGO_DATABASE_DEV }}
          MONGO_URL: ${{ secrets.MONGO_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          REACT_APP_URL: ${{ secrets.REACT_APP_URL }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: poetry run pytest --maxfail=2 --disable-warnings -q

  build-and-push-backend:
    needs: test-backend
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/paim-webapp-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker Image Tag
        run: echo "${{ secrets.DOCKERHUB_USERNAME }}/paim-webapp-backend:${{ github.sha }}" > image_name.txt

      - name: Upload Artifact with backend image name
        uses: actions/upload-artifact@v4
        with:
          name: backend
          path: backend/image_name.txt

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm test

      - name: End job if it's not main branch
        if: github.ref == 'refs/heads/main'
        run: exit 0

      - name: Build frontend
        run: npm run build

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
            name: frontend
            path: frontend/dist