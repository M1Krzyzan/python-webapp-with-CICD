name: CI Pipeline

on:
  push:
    paths:
      - backend/**
      - frontend/**
      - infra/**
  workflow_dispatch:

jobs:
  check-changes-backend:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.changes.outputs.backend || 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes in backend
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'backend/**'
          initial-fetch-depth: 0

  test-build-backend:
    needs: check-changes-backend
    if: ${{ needs.check-changes-backend.outputs.backend_changed }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debugging
        run: echo ${{ needs.check-changes-backend.outputs.backend_changed }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup Poetry
        run: pip install --no-cache-dir "poetry==1.8.4"

      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/pyproject.toml', 'backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install --no-root --no-interaction --no-ansi

      - name: Run backend tests
        env:
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
          MONGO_USER: ${{ secrets.MONGO_USER }}
          MONGO_DATABASE: ${{ secrets.MONGO_DATABASE_DEV }}
          MONGO_URL: ${{ secrets.MONGO_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          REACT_APP_URL: ${{ secrets.REACT_APP_URL }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: poetry run pytest --maxfail=2 --disable-warnings -q

      - name: Package application
        run: |
          mkdir -p package
          poetry export -f requirements.txt --without-hashes --output requirements.txt
          cp -r application domain infrastructure function_app.py host.json requirements.txt package/
          cd package && ls && zip -r ../backend.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend
          path: backend/backend.zip

  check-changes-frontend:
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.changes.outputs.frontend || 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes in frontend
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
          initial-fetch-depth: 0

  test-build-frontend:
    needs: check-changes-frontend
    if: ${{ needs.check-changes-frontend.outputs.frontend_changed }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm test

      - name: Build frontend
        run: npm run build

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
            name: frontend
            path: frontend/dist
